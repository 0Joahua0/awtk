/**
 * File:   window_animator_direct
 * Author: Li XianJing <xianjimli@hotmail.com>
 * Brief:  window_animator_direct
 *
 * Copyright (c) 2018 - 2018  Li XianJing <xianjimli@hotmail.com>
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * License file for more details.
 *
 */

/**
 * History:
 * ================================================================
 * 2018-04-19 Li XianJing <xianjimli@hotmail.com> created
 *
 */

#include "base/mem.h"
#include "base/window_animator.h"

static ret_t window_animator_open_destroy(window_animator_t* wa) {
  memset(wa, 0x00, sizeof(window_animator_t));
  MEM_FREE(wa);

  return RET_OK;
}

static ret_t window_animator_close_destroy(window_animator_t* wa) {
  widget_destroy(wa->curr_win);
  
  memset(wa, 0x00, sizeof(window_animator_t));
  MEM_FREE(wa);

  return RET_OK;
}

static ret_t fbo_to_img(framebuffer_object_t* fbo, bitmap_t* img) {
  return_value_if_fail(fbo != NULL && img != NULL, RET_BAD_PARAMS);

  img->w = fbo->w * fbo->ratio;
  img->h = fbo->h * fbo->ratio;
  img->id = fbo->id;

  img->flags = BITMAP_FLAG_TEXTURE;

  return RET_OK;
}

static ret_t window_animator_prepare(window_animator_t* wa, canvas_t* c) {
  widget_t* prev_win = wa->prev_win;
  widget_t* curr_win = wa->curr_win;
  vgcanvas_t* vg = lcd_get_vgcanvas(c->lcd);
  
  ENSURE(vgcanvas_create_fbo(vg, &(wa->prev_fbo)) == RET_OK);
  ENSURE(vgcanvas_bind_fbo(vg, &(wa->prev_fbo)) == RET_OK);
  vgcanvas_scale(vg, 1, 1);
  ENSURE(widget_paint(prev_win, c) == RET_OK);
  ENSURE(vgcanvas_unbind_fbo(vg, &(wa->prev_fbo)) == RET_OK);

  ENSURE(vgcanvas_create_fbo(vg, &(wa->curr_fbo)) == RET_OK);
  ENSURE(vgcanvas_bind_fbo(vg, &(wa->curr_fbo)) == RET_OK);
  vgcanvas_scale(vg, 1, 1);
  ENSURE(widget_paint(curr_win, c) == RET_OK);
  ENSURE(vgcanvas_unbind_fbo(vg, &(wa->curr_fbo)) == RET_OK);

  fbo_to_img(&(wa->prev_fbo), &(wa->prev_img));
  fbo_to_img(&(wa->curr_fbo), &(wa->curr_img));

  return RET_OK;
}

static ret_t window_animator_scale_update(window_animator_t* wa, canvas_t* c,
                                               uint32_t time_ms, bool_t open) {
  rect_t r;
  float_t percent = 0;                                               
  float_t time_percent = 0;                                               
  widget_t* prev_win = wa->prev_win;
  widget_t* curr_win = wa->curr_win;
  vgcanvas_t* vg = lcd_get_vgcanvas(c->lcd);
  xy_t x = 0;
  xy_t y = 0;
  wh_t w = 0;
  wh_t h = 0;

  if(wa->start_time == 0) {
    wa->start_time = time_ms;
  }

  time_percent = (time_ms - wa->start_time)/(float_t)(wa->duration);
  if(time_percent >= 1) {
    time_percent = 1;
  }

  if(open) {
    percent = 0.9 + 0.1 * wa->easing(time_percent);
  } else {
    percent = 1.0 - 0.1 * wa->easing(time_percent);
  }

  rect_init(r, curr_win->x, curr_win->y, curr_win->w, curr_win->h);
  ENSURE(canvas_begin_frame(c, &r) == RET_OK);
  ENSURE(widget_paint(prev_win, c) == RET_OK);

  vgcanvas_save(vg);

  vgcanvas_translate(vg, x+(curr_win->w >> 1), y+(curr_win->h>>1));

  vgcanvas_scale(vg, percent, percent);
  vgcanvas_translate(vg, -(curr_win->w >> 1), -(curr_win->h>>1));
  vgcanvas_set_global_alpha(vg, percent);

  vgcanvas_draw_image(vg, &(wa->curr_img), x*2, y*2, 2*wa->curr_win->w, 2*wa->curr_win->h, 0, 0, curr_win->w, curr_win->h);
  log_debug("percent=%f time_percent=%f time=%u\n", percent, time_percent, time_ms);

  vgcanvas_restore(vg);

  ENSURE(canvas_end_frame(c) == RET_OK);

  return time_percent >= 1 ? RET_DONE : RET_OK;
}

static ret_t window_animator_open_scale_update(window_animator_t* wa, canvas_t* c,
                                                uint32_t time_ms) {
  return window_animator_scale_update(wa, c, time_ms, TRUE);
}

static ret_t window_animator_close_scale_update(window_animator_t* wa, canvas_t* c,
                                                uint32_t time_ms) {
  return window_animator_scale_update(wa, c, time_ms, FALSE);
}

static window_animator_t* window_animator_create_scale(widget_t* prev_win, widget_t* curr_win,
                                                       bool_t open) {
  window_animator_t* wa = MEM_ZALLOC(window_animator_t);
  return_value_if_fail(wa != NULL, NULL);

  wa->prev_win = prev_win;
  wa->curr_win = curr_win;
  wa->duration = 400;

  if (open) {
    wa->easing = easing_get(EASING_QUADRATIC_IN);
    wa->update = window_animator_open_scale_update;
    wa->destroy = window_animator_open_destroy;
  } else {
    wa->easing = easing_get(EASING_QUADRATIC_IN);
    wa->update = window_animator_close_scale_update;
    wa->destroy = window_animator_close_destroy;
  }

  return wa;
}

window_animator_t* window_animator_create_for_open(window_animator_type_t type, canvas_t* c, widget_t* prev_win,
                                                   widget_t* curr_win) {
  window_animator_t* wa = window_animator_create_scale(prev_win, curr_win, TRUE);
  return_value_if_fail(wa != NULL, NULL);
  window_animator_prepare(wa, c);

  return wa;
}

window_animator_t* window_animator_create_for_close(window_animator_type_t type, canvas_t* c, widget_t* prev_win,
                                                    widget_t* curr_win) {
  window_animator_t* wa = window_animator_create_scale(prev_win, curr_win, FALSE);
  return_value_if_fail(wa != NULL, NULL);
  window_animator_prepare(wa, c);

  return wa;
}

